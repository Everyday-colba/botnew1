import logging
import asyncio
from telegram import Update, ReplyKeyboardRemove, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    ConversationHandler
)
import database
import keyboards
import utils
import config
import os
import sqlite3
from telegram.error import TimedOut, NetworkError
import time
from collections import defaultdict
import datetime

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
(
    SUBSCRIPTION_CHECK,
    LOGIN, PASSWORD, ADMIN_MENU,
    UPLOAD_CATEGORY, UPLOAD_PHOTO, UPLOAD_CAPTION, UPLOAD_CUSTOM_NAME,
    ADD_ADMIN, DEL_ADMIN,
    ADD_CATEGORY, DEL_CATEGORY,
    PARTICIPANT_CODE, NEW_PASSWORD,
    BAN_MANAGEMENT, BAN_USER_ID, UNBAN_USER_ID,
    CAMERA_CODES_MENU, STATS_VIEW, ALL_CODES_VIEW,
    DELETE_CAMERA, USER_LIST_VIEW, CATEGORY_MANAGEMENT,
    ADMIN_MANAGEMENT, ADD_ADMIN_NAME, ADD_ADMIN_PASSWORD,
    PROJECTS_MENU, PROJECT_MANAGEMENT, 
    UPLOAD_PROJECT_FILE, UPLOAD_PROJECT_CAPTION, UPLOAD_PROJECT_NAME,
    DELETE_PROJECT,
    PACKS_MENU, UPLOAD_PACK_FILE, UPLOAD_PACK_CAPTION, 
    UPLOAD_PACK_NAME, PACK_MANAGEMENT, DELETE_PACK,
    BROADCAST_MESSAGE, BROADCAST_HISTORY
) = range(40)

sessions = {}
message_counters = defaultdict(lambda: {'count': 0, 'last_reset': time.time(), 'blocked_until': 0})

async def send_photo_with_retry(update, photo_path, caption, max_retries=3):
    for attempt in range(max_retries):
        try:
            with open(photo_path, 'rb') as photo:
                await update.message.reply_photo(
                    photo=photo,
                    caption=caption,
                    parse_mode='HTML'
                )
                return True
        except (TimedOut, NetworkError) as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}/{max_retries}): {e}")
            if attempt < max_retries - 1:
                await asyncio.sleep(2)
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
                return False
    return False

async def is_subscribed(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        member = await context.bot.get_chat_member(
            chat_id=config.CHANNEL_ID, 
            user_id=user_id
        )
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

def check_rate_limit(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ (6 —Å–æ–æ–±—â–µ–Ω–∏–π/—Å–µ–∫—É–Ω–¥—É)"""
    current_time = time.time()
    counter = message_counters[user_id]
    
    # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 1 —Å–µ–∫—É–Ω–¥—ã
    if current_time - counter['last_reset'] > 1:
        counter['count'] = 0
        counter['last_reset'] = current_time
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if counter['blocked_until'] > current_time:
        return False
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
    counter['count'] += 1
    
    # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç - –±–ª–æ–∫–∏—Ä—É–µ–º –Ω–∞ 10 —Å–µ–∫—É–Ω–¥
    if counter['count'] > 6:
        counter['blocked_until'] = current_time + 10
        return False
    
    return True

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
    chat_id = update.effective_chat.id
    if chat_id in sessions:
        del sessions[chat_id]
    context.user_data.clear()
    
    user = update.effective_user
    user_id = user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return ConversationHandler.END
    
    database.add_user(
        user_id, 
        user.username, 
        user.first_name, 
        user.last_name
    )
    
    if database.is_banned(user_id):
        await update.message.reply_text("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        return ConversationHandler.END
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if not await is_subscribed(user_id, context):
        await update.message.reply_text(
            "üì¢ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!\n"
            f"–°—Å—ã–ª–∫–∞: {config.CHANNEL_LINK}\n\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
            reply_markup=ReplyKeyboardMarkup([["‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è"]], resize_keyboard=True),
            disable_web_page_preview=True
        )
        return SUBSCRIPTION_CHECK
    
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —Å–ª–∏–≤–∞ –∏ –≤—ã–¥–∞—á–∏ –∫–∞–º–µ—Ä!",
        reply_markup=keyboards.main_menu()
    )
    return PARTICIPANT_CODE

async def check_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return SUBSCRIPTION_CHECK
    
    if await is_subscribed(user_id, context):
        await update.message.reply_text(
            "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞!",
            reply_markup=keyboards.main_menu()
        )
        return PARTICIPANT_CODE
    else:
        await update.message.reply_text(
            "‚ùå –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!\n"
            f"–°—Å—ã–ª–∫–∞: {config.CHANNEL_LINK}\n\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üëá",
            reply_markup=ReplyKeyboardMarkup([["‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è"]], resize_keyboard=True),
            disable_web_page_preview=True
        )
        return SUBSCRIPTION_CHECK

async def show_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return PARTICIPANT_CODE
    
    await update.message.reply_text(
        f"üì¢ –ù–∞—à –∫–∞–Ω–∞–ª: {config.CHANNEL_LINK}\n\n"
        "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!",
        disable_web_page_preview=True
    )
    return PARTICIPANT_CODE

async def participant_code_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return PARTICIPANT_CODE
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if not await is_subscribed(user_id, context):
        await update.message.reply_text(
            "‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!\n"
            f"–°—Å—ã–ª–∫–∞: {config.CHANNEL_LINK}\n\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üëá",
            reply_markup=ReplyKeyboardMarkup([["‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è"]], resize_keyboard=True),
            disable_web_page_preview=True
        )
        return SUBSCRIPTION_CHECK
    
    await update.message.reply_text("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–∞–º–µ—Ä—ã:")
    return PARTICIPANT_CODE

async def participant_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return PARTICIPANT_CODE
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if not await is_subscribed(user_id, context):
        await update.message.reply_text(
            "‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!\n"
            f"–°—Å—ã–ª–∫–∞: {config.CHANNEL_LINK}\n\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üëá",
            reply_markup=ReplyKeyboardMarkup([["‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è"]], resize_keyboard=True),
            disable_web_page_preview=True
        )
        return SUBSCRIPTION_CHECK
    
    if database.is_banned(user_id):
        await update.message.reply_text("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        return ConversationHandler.END
    
    text = update.message.text
    
    if text == "üîê –í—Ö–æ–¥ –¥–ª—è –∞–¥–º–∏–Ω–∞":
        return await admin_login(update, context)
    
    if text == "üì¢ –ù–∞—à –∫–∞–Ω–∞–ª":
        return await show_channel(update, context)
    
    if text == "üìÅ –ü—Ä–æ–µ–∫—Ç—ã":
        return await projects_menu(update, context)
    
    if text == "üì¶ –ü–∞–∫–∏ –∫–∞–º–µ—Ä":
        return await packs_menu(update, context)
    
    code = text.strip().upper()
    camera = database.get_camera(code)
    
    if camera:
        image_path, caption, custom_name = camera
        try:
            formatted_caption = utils.format_caption(caption, custom_name)
            caption_text = f"üì∏ –ö–∞–º–µ—Ä–∞: {code}\n\n{formatted_caption}"
            
            success = await send_photo_with_retry(update, image_path, caption_text)
            
            if not success:
                await update.message.reply_text(
                    "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
                
        except FileNotFoundError:
            await update.message.reply_text("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    else:
        await update.message.reply_text("‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    return PARTICIPANT_CODE

async def admin_login(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return PARTICIPANT_CODE
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if not await is_subscribed(user_id, context):
        await update.message.reply_text(
            "‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!\n"
            f"–°—Å—ã–ª–∫–∞: {config.CHANNEL_LINK}\n\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üëá",
            reply_markup=ReplyKeyboardMarkup([["‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è"]], resize_keyboard=True),
            disable_web_page_preview=True
        )
        return SUBSCRIPTION_CHECK
    
    await update.message.reply_text(
        "üîê –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:",
        reply_markup=ReplyKeyboardRemove()
    )
    return LOGIN

async def login(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return LOGIN
    
    context.user_data['username'] = update.message.text
    await update.message.reply_text("üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")
    return PASSWORD

async def password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return PASSWORD
    
    username = context.user_data['username']
    password = update.message.text
    
    admin_exists = database.admin_exists(username)
    
    if admin_exists and database.verify_admin(username, password):
        is_master = database.is_master_admin(username)
        sessions[update.effective_chat.id] = username
        await update.message.reply_text(
            f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥, {'–≥–ª–∞–≤–Ω—ã–π ' if is_master else ''}–∞–¥–º–∏–Ω {username}!",
            reply_markup=keyboards.admin_menu(is_master)
        )
        return ADMIN_MENU
    else:
        if username in config.MASTER_ADMINS and not admin_exists:
            database.add_admin(username, password, is_master=True, display_name=username)
            sessions[update.effective_chat.id] = username
            await update.message.reply_text(
                f"üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω {username}!",
                reply_markup=keyboards.admin_menu(True)
            )
            return ADMIN_MENU
        
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /start")
        return ConversationHandler.END

async def upload_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = sessions[update.effective_chat.id]
    is_master = database.is_master_admin(username)
    
    user_id = update.effective_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return ADMIN_MENU
    
    categories = database.get_all_categories()
    keyboard = [categories[i:i+2] for i in range(0, len(categories), 2)]
    keyboard.append(["üîô –ù–∞–∑–∞–¥"])
    
    await update.message.reply_text(
        "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return UPLOAD_CATEGORY

async def upload_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return UPLOAD_CATEGORY
    
    text = update.message.text
    
    if text == "üîô –ù–∞–∑–∞–¥":
        username = sessions[update.effective_chat.id]
        is_master = database.is_master_admin(username)
        await update.message.reply_text(
            "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞",
            reply_markup=keyboards.admin_menu(is_master))
        return ADMIN_MENU
    
    categories = database.get_all_categories()
    if text not in categories:
        await update.message.reply_text("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return UPLOAD_CATEGORY
    
    context.user_data['category'] = text
    await update.message.reply_text(
        "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∫–∞–º–µ—Ä—ã:",
        reply_markup=ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True))
    return UPLOAD_PHOTO

async def upload_photo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return UPLOAD_PHOTO
    
    if update.message.text == "üîô –ù–∞–∑–∞–¥":
        return await back_to_admin_menu_from_upload(update, context)
    
    photo = await update.message.photo[-1].get_file()
    category = context.user_data['category']
    
    category_dir = f"cameras/{category}"
    os.makedirs(category_dir, exist_ok=True)
    
    file_id = utils.safe_filename(update.message.photo[-1].file_id)
    filename = f"{category_dir}/{file_id}.jpg"
    
    await photo.download_to_drive(filename)
    context.user_data['image_path'] = filename
    await update.message.reply_text(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–¥–ø–∏—Å—å –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞:",
        reply_markup=ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True))
    return UPLOAD_CAPTION

async def upload_caption(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return UPLOAD_CAPTION
    
    if update.message.text == "üîô –ù–∞–∑–∞–¥":
        return await back_to_admin_menu_from_upload(update, context)
    
    context.user_data['caption'] = update.message.text
    await update.message.reply_text(
        "üè∑Ô∏è –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –∫–∞–º–µ—Ä—ã? (–µ—Å–ª–∏ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–µ—Ç')",
        reply_markup=ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True))
    return UPLOAD_CUSTOM_NAME

async def upload_custom_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return UPLOAD_CUSTOM_NAME
    
    if update.message.text == "üîô –ù–∞–∑–∞–¥":
        return await back_to_admin_menu_from_upload(update, context)
    
    custom_name = None
    if update.message.text.lower() != '–Ω–µ—Ç':
        custom_name = update.message.text
    
    caption = context.user_data['caption']
    username = sessions[update.effective_chat.id]
    image_path = context.user_data['image_path']
    category = context.user_data['category']
    
    code = database.add_camera(username, category, image_path, caption, custom_name)
    is_master = database.is_master_admin(username)
    
    response = f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω!\nüî¢ –ö–æ–¥ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞: {code}\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}"
    if custom_name:
        response += f"\nüè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {custom_name}"
    
    await update.message.reply_text(
        response,
        reply_markup=keyboards.admin_menu(is_master))
    return ADMIN_MENU

async def change_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return ADMIN_MENU
    
    await update.message.reply_text("üîë –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:")
    return NEW_PASSWORD

async def new_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return NEW_PASSWORD
    
    new_password = update.message.text
    username = sessions[update.effective_chat.id]
    
    conn = sqlite3.connect('camera_bot.db')
    cursor = conn.cursor()
    cursor.execute('UPDATE admins SET password = ? WHERE username = ?', (new_password, username))
    conn.commit()
    conn.close()
    
    is_master = database.is_master_admin(username)
    await update.message.reply_text(
        "‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!",
        reply_markup=keyboards.admin_menu(is_master))
    return ADMIN_MENU

async def admin_management(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return ADMIN_MENU
    
    await update.message.reply_text(
        "üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏:",
        reply_markup=keyboards.admin_management_keyboard())
    return ADMIN_MANAGEMENT

async def add_admin_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return ADMIN_MANAGEMENT
    
    await update.message.reply_text("üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞ (–≤–∏–¥–∏–º–æ–µ –≥–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–∞–º):")
    return ADD_ADMIN_NAME

async def add_admin_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return ADD_ADMIN_NAME
    
    context.user_data['new_admin_name'] = update.message.text
    await update.message.reply_text("üë§ –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞:")
    return ADD_ADMIN

async def add_admin_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return ADD_ADMIN
    
    context.user_data['new_admin_username'] = update.message.text
    await update.message.reply_text("üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞:")
    return ADD_ADMIN_PASSWORD

async def add_admin_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return ADD_ADMIN_PASSWORD
    
    password = update.message.text
    admin_name = context.user_data['new_admin_name']
    username = context.user_data['new_admin_username']
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –∫–∞–∫ –æ–±—ã—á–Ω–æ–≥–æ (–Ω–µ –≥–ª–∞–≤–Ω–æ–≥–æ)
    database.add_admin(username, password, display_name=admin_name)
    
    await update.message.reply_text(
        f"‚úÖ –ê–¥–º–∏–Ω {admin_name} (@{username}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
        reply_markup=keyboards.admin_management_keyboard())
    return ADMIN_MANAGEMENT

async def del_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return ADMIN_MANAGEMENT
    
    admins = database.get_all_admins()
    if not admins:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return await back_to_admin_menu(update, context)
    
    admins_text = "\n".join([f"- {admin[1]} (@{admin[0]})" for admin in admins])
    await update.message.reply_text(
        f"üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:\n{admins_text}\n\n"
        "‚ûñ –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∞–¥–º–∏–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=keyboards.back_only_keyboard())
    return DEL_ADMIN

async def del_admin_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return DEL_ADMIN
    
    if update.message.text == "üîô –ù–∞–∑–∞–¥":
        return await back_to_admin_menu(update, context)
    
    admin_to_delete = update.message.text
    username = sessions[update.effective_chat.id]
    
    if admin_to_delete in config.MASTER_ADMINS:
        await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞!")
    elif admin_to_delete == username:
        await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!")
    else:
        database.delete_admin(admin_to_delete)
        await update.message.reply_text(f"‚úÖ –ê–¥–º–∏–Ω {admin_to_delete} —É–¥–∞–ª–µ–Ω!")
    
    return await back_to_admin_menu(update, context)

async def list_admins(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return ADMIN_MANAGEMENT
    
    admins = database.get_all_admins()
    if not admins:
        await update.message.reply_text("üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –ø—É—Å—Ç.")
        return ADMIN_MANAGEMENT
    
    master_admins = config.MASTER_ADMINS
    admins_list = []
    for admin in admins:
        username, display_name = admin
        if username in master_admins:
            admins_list.append(f"üëë {display_name} (@{username}) - –≥–ª–∞–≤–Ω—ã–π")
        else:
            admins_list.append(f"üë§ {display_name} (@{username})")
    
    message = "üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n\n" + "\n".join(admins_list)
    await update.message.reply_text(message)
    return ADMIN_MANAGEMENT

async def category_management(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return ADMIN_MENU
    
    await update.message.reply_text(
        "üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∞–º–∏:",
        reply_markup=keyboards.category_management_keyboard())
    return CATEGORY_MANAGEMENT

async def add_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return CATEGORY_MANAGEMENT
    
    await update.message.reply_text("‚ûï –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–∏:")
    return ADD_CATEGORY

async def add_category_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return ADD_CATEGORY
    
    new_category = update.message.text
    if database.add_category(new_category):
        await update.message.reply_text(
            f"‚úÖ –í–∫–ª–∞–¥–∫–∞ '{new_category}' —Å–æ–∑–¥–∞–Ω–∞!",
            reply_markup=keyboards.category_management_keyboard())
        return CATEGORY_MANAGEMENT
    else:
        await update.message.reply_text(
            "‚ùå –¢–∞–∫–∞—è –≤–∫–ª–∞–¥–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",
            reply_markup=keyboards.category_management_keyboard())
        return CATEGORY_MANAGEMENT

async def del_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return CATEGORY_MANAGEMENT
    
    categories = database.get_all_categories()
    if not categories:
        await update.message.reply_text("‚ùå –ù–µ—Ç –≤–∫–ª–∞–¥–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return await category_management(update, context)
    
    categories_text = "\n".join([f"- {cat}" for cat in categories])
    await update.message.reply_text(
        f"üìÇ –°–ø–∏—Å–æ–∫ –≤–∫–ª–∞–¥–æ–∫:\n{categories_text}\n\n"
        "‚ûñ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=keyboards.back_only_keyboard())
    return DEL_CATEGORY

async def del_category_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return DEL_CATEGORY
    
    text = update.message.text
    
    if text == "üîô –ù–∞–∑–∞–¥":
        return await category_management(update, context)
    
    if database.delete_category(text):
        await update.message.reply_text(
            f"‚úÖ –í–∫–ª–∞–¥–∫–∞ '{text}' —É–¥–∞–ª–µ–Ω–∞!",
            reply_markup=keyboards.category_management_keyboard())
        return CATEGORY_MANAGEMENT
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–∫–ª–∞–¥–∫—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.",
            reply_markup=keyboards.category_management_keyboard())
        return CATEGORY_MANAGEMENT

async def ban_management(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return ADMIN_MENU
    
    await update.message.reply_text(
        "üö´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–Ω–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:",
        reply_markup=keyboards.ban_management_keyboard())
    return BAN_MANAGEMENT

async def ban_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return BAN_MANAGEMENT
    
    await update.message.reply_text(
        "üö´ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:",
        reply_markup=keyboards.back_only_keyboard())
    return BAN_USER_ID

async def unban_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return BAN_MANAGEMENT
    
    await update.message.reply_text(
        "‚úÖ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:",
        reply_markup=keyboards.back_only_keyboard())
    return UNBAN_USER_ID

async def list_banned_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return BAN_MANAGEMENT
    
    banned_users = database.get_banned_users()
    
    if not banned_users:
        await update.message.reply_text("‚úÖ –ù–µ—Ç –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    else:
        users_list = "\n".join([f"üÜî {user_id}" for user_id in banned_users])
        message = "üö´ –ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n" + users_list
        await update.message.reply_text(message)
    
    return BAN_MANAGEMENT

async def ban_user_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return BAN_USER_ID
    
    if update.message.text == "üîô –ù–∞–∑–∞–¥":
        return await ban_management(update, context)
    
    try:
        user_id = int(update.message.text)
        database.ban_user(user_id)
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!")
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
    
    return await ban_management(update, context)

async def unban_user_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return UNBAN_USER_ID
    
    if update.message.text == "üîô –ù–∞–∑–∞–¥":
        return await ban_management(update, context)
    
    try:
        user_id = int(update.message.text)
        database.unban_user(user_id)
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!")
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
    
    return await ban_management(update, context)

async def camera_codes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return ADMIN_MENU
    
    username = sessions[update.effective_chat.id]
    is_master = database.is_master_admin(username)
    
    if is_master:
        await update.message.reply_text(
            "üîë –ú–µ–Ω—é –∫–æ–¥–æ–≤ –æ—Ç –∫–∞–º–µ—Ä:",
            reply_markup=keyboards.camera_codes_menu())
        return CAMERA_CODES_MENU
    else:
        return await my_codes(update, context)

async def camera_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return CAMERA_CODES_MENU
    
    stats = database.get_camera_stats()
    if not stats:
        await update.message.reply_text("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∫–∞–º–µ—Ä—ã.")
        return await camera_codes(update, context)
    
    stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n\n"
    for category, count in stats:
        stats_text += f"üìÇ {category}: {count} –∫–∞–º–µ—Ä\n"
    
    await update.message.reply_text(stats_text)
    return CAMERA_CODES_MENU

async def all_codes_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return CAMERA_CODES_MENU
    
    cameras = database.get_cameras_with_admin()
    if not cameras:
        await update.message.reply_text("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∫–∞–º–µ—Ä—ã.")
        return await camera_codes(update, context)
    
    message = "üìù –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞–º–µ—Ä:\n\n"
    for code, category, custom_name, admin in cameras:
        cam_info = f"üîë {code}\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\nüë§ –ê–¥–º–∏–Ω: {admin}\n"
        if custom_name:
            cam_info += f"üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {custom_name}\n"
        cam_info += "\n"
        
        if len(message) + len(cam_info) > 4000:
            await update.message.reply_text(message)
            message = ""
        message += cam_info
    
    if message:
        await update.message.reply_text(message)
    
    return CAMERA_CODES_MENU

async def my_codes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return ADMIN_MENU
    
    username = sessions[update.effective_chat.id]
    cameras = database.get_cameras_by_admin(username)
    
    if not cameras:
        await update.message.reply_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∫–∞–º–µ—Ä—ã.")
        return await back_to_admin_menu(update, context)
    
    message = "üìù –í–∞—à–∏ –∫–∞–º–µ—Ä—ã:\n\n"
    for code, category, custom_name in cameras:
        cam_info = f"üîë {code}\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
        if custom_name:
            cam_info += f"üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {custom_name}\n"
        cam_info += "\n"
        
        if len(message) + len(cam_info) > 4000:
            await update.message.reply_text(message)
            message = ""
        message += cam_info
    
    if message:
        await update.message.reply_text(message)
    
    return ADMIN_MENU

async def delete_camera_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return ADMIN_MENU
    
    await update.message.reply_text(
        "üóëÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–∞–º–µ—Ä—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=keyboards.back_only_keyboard())
    return DELETE_CAMERA

async def delete_camera_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return DELETE_CAMERA
    
    if update.message.text == "üîô –ù–∞–∑–∞–¥":
        return await back_to_admin_menu(update, context)
    
    code = update.message.text.strip().upper()
    image_path = database.delete_camera(code)
    
    if image_path:
        try:
            if os.path.exists(image_path):
                os.remove(image_path)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        
        await update.message.reply_text(f"‚úÖ –ö–∞–º–µ—Ä–∞ {code} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
    else:
        await update.message.reply_text("‚ùå –ö–∞–º–µ—Ä–∞ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    
    return await back_to_admin_menu(update, context)

async def user_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return ADMIN_MENU
    
    users = database.get_all_users()
    
    if not users:
        await update.message.reply_text("üì≠ –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return await back_to_admin_menu(update, context)
    
    message = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for user_id, username, first_name, last_name, is_banned in users:
        user_info = (
            f"üÜî ID: {user_id}\n"
            f"üë§ –ò–º—è: {first_name or ''} {last_name or ''}\n"
            f"üìõ Username: @{username or '–Ω–µ—Ç'}\n"
            f"üö´ –°—Ç–∞—Ç—É—Å: {'–ó–∞–±–∞–Ω–µ–Ω' if is_banned else '–ê–∫—Ç–∏–≤–µ–Ω'}\n"
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        )
        
        if len(message) + len(user_info) > 4000:
            await update.message.reply_text(message)
            message = ""
        message += user_info
    
    if message:
        await update.message.reply_text(
            message,
            reply_markup=keyboards.admin_menu(True))
    
    return ADMIN_MENU

async def back_to_admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = sessions[update.effective_chat.id]
    is_master = database.is_master_admin(username)
    await update.message.reply_text(
        "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞",
        reply_markup=keyboards.admin_menu(is_master))
    return ADMIN_MENU

async def back_to_admin_menu_from_upload(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏
    keys_to_remove = ['category', 'image_path', 'caption']
    for key in keys_to_remove:
        if key in context.user_data:
            del context.user_data[key]
    
    return await back_to_admin_menu(update, context)

async def back_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=keyboards.main_menu())
    return PARTICIPANT_CODE

async def logout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return ADMIN_MENU
    
    if update.effective_chat.id in sessions:
        del sessions[update.effective_chat.id]
    await update.message.reply_text(
        "üëã –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –∞–¥–º–∏–Ω–∞.",
        reply_markup=keyboards.main_menu())
    return PARTICIPANT_CODE

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return PARTICIPANT_CODE
    
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=keyboards.main_menu())
    return PARTICIPANT_CODE

# ====== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–†–û–ï–ö–¢–û–í ======

async def projects_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return PARTICIPANT_CODE
    
    projects = database.get_all_projects()
    if not projects:
        await update.message.reply_text(
            "üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤.",
            reply_markup=keyboards.projects_menu()
        )
        return PROJECTS_MENU
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–µ–∫—Ç—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    context.user_data['projects'] = {}
    keyboard = []
    
    for project in projects:
        project_id, display_name, caption, file_path = project
        formatted_name = utils.format_project_name(display_name)
        context.user_data['projects'][formatted_name] = project
        keyboard.append([formatted_name])
    
    keyboard.append(["üîô –ù–∞–∑–∞–¥"])
    
    await update.message.reply_text(
        "üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return PROJECTS_MENU

async def send_project(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return PROJECTS_MENU
    
    text = update.message.text.strip()
    projects = context.user_data.get('projects', {})
    
    logger.info(f"–ü–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞: '{text}'")
    logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã: {list(projects.keys())}")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç –ø–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∏–º–µ–Ω–∏
    if text in projects:
        project_id, display_name, caption, file_path = projects[text]
        try:
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not os.path.exists(file_path):
                logger.error(f"–§–∞–π–ª –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                await update.message.reply_text("‚ùå –§–∞–π–ª –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                return PROJECTS_MENU
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ö–û–î)
            with open(file_path, 'rb') as file:
                await update.message.reply_document(
                    document=file,
                    caption=caption,
                    filename=os.path.basename(file_path)
                )
            logger.info(f"–ü—Ä–æ–µ–∫—Ç '{display_name}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞: {e}", exc_info=True)
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    else:
        logger.warning(f"–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: '{text}'")
        await update.message.reply_text("‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.")
    
    return PROJECTS_MENU

async def project_management(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –¥–ª—è –≥–ª–∞–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤"""
    username = sessions[update.effective_chat.id]
    if not database.is_master_admin(username):
        return await back_to_admin_menu(update, context)
    
    user_id = update.effective_user.id
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return ADMIN_MENU
    
    await update.message.reply_text(
        "üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏:",
        reply_markup=keyboards.project_management_keyboard())
    return PROJECT_MANAGEMENT

async def upload_project_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
    user_id = update.effective_user.id
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return PROJECT_MANAGEMENT
    
    await update.message.reply_text(
        "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –ø—Ä–æ–µ–∫—Ç–∞ (–∞—Ä—Ö–∏–≤, –¥–æ–∫—É–º–µ–Ω—Ç):",
        reply_markup=ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True))
    return UPLOAD_PROJECT_FILE

async def upload_project_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–∞–π–ª –ø—Ä–æ–µ–∫—Ç–∞"""
    user_id = update.effective_user.id
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return UPLOAD_PROJECT_FILE
    
    if not update.message.document:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç.")
        return UPLOAD_PROJECT_FILE
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
    file = await update.message.document.get_file()
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤
    os.makedirs("projects", exist_ok=True)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    original_name = update.message.document.file_name
    safe_name = utils.safe_project_filename(original_name)
    file_path = f"projects/{safe_name}"
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    await file.download_to_drive(file_path)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    context.user_data['project_file_path'] = file_path
    await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–¥–ø–∏—Å—å –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞:")
    return UPLOAD_PROJECT_CAPTION

async def upload_project_caption(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–æ–¥–ø–∏—Å—å –ø—Ä–æ–µ–∫—Ç–∞"""
    user_id = update.effective_user.id
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return UPLOAD_PROJECT_CAPTION
    
    context.user_data['project_caption'] = update.message.text
    await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (–±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –º–µ–Ω—é):")
    return UPLOAD_PROJECT_NAME

async def upload_project_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–æ–µ–∫—Ç–∞"""
    user_id = update.effective_user.id
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return UPLOAD_PROJECT_NAME
    
    display_name = update.message.text
    file_path = context.user_data['project_file_path']
    caption = context.user_data['project_caption']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–µ–∫—Ç –≤ –±–∞–∑—É
    database.add_project(file_path, caption, display_name)
    
    username = sessions[update.effective_chat.id]
    is_master = database.is_master_admin(username)
    await update.message.reply_text(
        f"‚úÖ –ü—Ä–æ–µ–∫—Ç '{display_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!",
        reply_markup=keyboards.admin_menu(is_master))
    return ADMIN_MENU

async def list_projects_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    user_id = update.effective_user.id
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return PROJECT_MANAGEMENT
    
    projects = database.get_all_projects()
    if not projects:
        await update.message.reply_text("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤.")
        return PROJECT_MANAGEMENT
    
    message = "üìÅ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤:\n\n"
    for project in projects:
        project_id, display_name, caption, file_path = project
        message += f"üÜî ID: {project_id}\n"
        message += f"üìå {display_name}\n"
        message += f"‚ÑπÔ∏è {caption}\n"
        message += f"üìÇ –§–∞–π–ª: {os.path.basename(file_path)}\n"
        message += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
    
    await update.message.reply_text(message)
    return PROJECT_MANAGEMENT

async def delete_project_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
    user_id = update.effective_user.id
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return PROJECT_MANAGEMENT
    
    await update.message.reply_text(
        "üóëÔ∏è –í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=keyboards.back_only_keyboard())
    return DELETE_PROJECT

async def delete_project_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"""
    user_id = update.effective_user.id
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return DELETE_PROJECT
    
    if update.message.text == "üîô –ù–∞–∑–∞–¥":
        return await back_to_project_management(update, context)
    
    try:
        project_id = int(update.message.text)
        project = database.get_project(project_id)
        
        if project:
            file_path = project[3]  # file_path –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ 4-–π –ø–æ–∑–∏—Ü–∏–∏
            database.delete_project(project_id)
            
            try:
                if os.path.exists(file_path):
                    os.remove(file_path)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ø—Ä–æ–µ–∫—Ç–∞: {e}")
            
            await update.message.reply_text(f"‚úÖ –ü—Ä–æ–µ–∫—Ç ID:{project_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!")
        else:
            await update.message.reply_text("‚ùå –ü—Ä–æ–µ–∫—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø—Ä–æ–µ–∫—Ç–∞.")
    
    return await back_to_project_management(update, context)

async def back_to_projects_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    await update.message.reply_text(
        "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –ø—Ä–æ–µ–∫—Ç–æ–≤",
        reply_markup=keyboards.projects_menu())
    return PROJECTS_MENU

async def back_to_project_management(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏"""
    await update.message.reply_text(
        "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏",
        reply_markup=keyboards.project_management_keyboard())
    return PROJECT_MANAGEMENT

# ====== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–ê–ö–û–í –ö–ê–ú–ï–† ======

async def packs_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–∞–∫–æ–≤"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return PARTICIPANT_CODE
    
    packs = database.get_all_packs()
    if not packs:
        await update.message.reply_text(
            "üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –ø–∞–∫–æ–≤ –∫–∞–º–µ—Ä.",
            reply_markup=keyboards.packs_menu()
        )
        return PACKS_MENU
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞–∫–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['packs'] = {}
    keyboard = []
    
    for pack in packs:
        pack_id, display_name, caption, file_path, admin_username = pack
        formatted_name = utils.format_pack_name(display_name)
        context.user_data['packs'][formatted_name] = pack
        keyboard.append([formatted_name])
    
    keyboard.append(["üîô –ù–∞–∑–∞–¥"])
    
    await update.message.reply_text(
        "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫ –∫–∞–º–µ—Ä:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return PACKS_MENU

async def send_pack(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞–∫"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    if not check_rate_limit(user_id):
        await update.message.reply_text("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
        return PACKS_MENU
    
    text = update.message.text.strip()
    packs = context.user_data.get('packs', {})
    
    if text in packs:
        pack_id, display_name, caption, file_path, admin_username = packs[text]
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(file_path):
                await update.message.reply_text("‚ùå –§–∞–π–ª –ø–∞–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                return PACKS_MENU
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–∞–∫–∞
            with open(file_path, 'rb') as file:
                await update.message.reply_document(
                    document=file,
                    caption=caption,
                    filename=os.path.basename(file_path))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∞–∫–∞: {e}", exc_info=True)
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∞–∫. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    else:
        await update.message.reply_text("‚ùå –ü–∞–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫ –∏–∑ —Å–ø–∏—Å–∫–∞.")
    
    return PACKS_MENU

async def pack_management(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–∫–∞–º–∏"""
    username = sessions[update.effective_chat.id]
    is_master = database.is_master_admin(username)
    await update.message.reply_text(
        "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–∫–∞–º–∏ –∫–∞–º–µ—Ä:",
        reply_markup=keyboards.pack_management_keyboard(is_master))
    return PACK_MANAGEMENT

async def upload_pack_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –ø–∞–∫–∞"""
    await update.message.reply_text(
        "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –ø–∞–∫–∞ –∫–∞–º–µ—Ä (–∞—Ä—Ö–∏–≤):",
        reply_markup=ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True))
    return UPLOAD_PACK_FILE

async def upload_pack_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–∞–π–ª –ø–∞–∫–∞"""
    if not update.message.document:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç.")
        return UPLOAD_PACK_FILE
    
    file = await update.message.document.get_file()
    os.makedirs("packs", exist_ok=True)
    
    original_name = update.message.document.file_name
    safe_name = utils.safe_pack_filename(original_name)
    file_path = f"packs/{safe_name}"
    
    await file.download_to_drive(file_path)
    context.user_data['pack_file_path'] = file_path
    await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–∞–∫–∞:")
    return UPLOAD_PACK_CAPTION

async def upload_pack_caption(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø–∞–∫–∞"""
    context.user_data['pack_caption'] = update.message.text
    await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–∫–∞ (–±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –º–µ–Ω—é):")
    return UPLOAD_PACK_NAME

async def upload_pack_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –ø–∞–∫–∞"""
    display_name = update.message.text
    file_path = context.user_data['pack_file_path']
    caption = context.user_data['pack_caption']
    username = sessions[update.effective_chat.id]
    
    database.add_pack(file_path, caption, display_name, username)
    
    is_master = database.is_master_admin(username)
    await update.message.reply_text(
        f"‚úÖ –ü–∞–∫ '{display_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!",
        reply_markup=keyboards.admin_menu(is_master))
    return ADMIN_MENU

async def list_my_packs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø–∏—Å–æ–∫ –ø–∞–∫–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –∞–¥–º–∏–Ω–∞"""
    username = sessions[update.effective_chat.id]
    packs = database.get_packs_by_admin(username)
    
    if not packs:
        await update.message.reply_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–∞–∫–æ–≤.")
        return PACK_MANAGEMENT
    
    message = "üì¶ –í–∞—à–∏ –ø–∞–∫–∏:\n\n"
    for pack in packs:
        pack_id, display_name, caption, file_path = pack
        message += f"üÜî ID: {pack_id}\n"
        message += f"üìå {display_name}\n"
        message += f"‚ÑπÔ∏è {caption}\n"
        message += f"üìÇ –§–∞–π–ª: {os.path.basename(file_path)}\n"
        message += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
    
    await update.message.reply_text(message)
    return PACK_MANAGEMENT

async def list_all_packs_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∞–∫–æ–≤ (–¥–ª—è –≥–ª–∞–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤)"""
    packs = database.get_all_packs()
    if not packs:
        await update.message.reply_text("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –ø–∞–∫–æ–≤.")
        return PACK_MANAGEMENT
    
    message = "üì¶ –í—Å–µ –ø–∞–∫–∏:\n\n"
    for pack in packs:
        pack_id, display_name, caption, file_path, admin_username = pack
        message += f"üÜî ID: {pack_id}\n"
        message += f"üìå {display_name}\n"
        message += f"üë§ –ê–≤—Ç–æ—Ä: {admin_username}\n"
        message += f"‚ÑπÔ∏è {caption}\n"
        message += f"üìÇ –§–∞–π–ª: {os.path.basename(file_path)}\n"
        message += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
    
    await update.message.reply_text(message)
    return PACK_MANAGEMENT

async def delete_pack_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –ø–∞–∫–∞"""
    await update.message.reply_text(
        "üóëÔ∏è –í–≤–µ–¥–∏—Ç–µ ID –ø–∞–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=keyboards.back_only_keyboard())
    return DELETE_PACK

async def delete_pack_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –ø–∞–∫–∞"""
    if update.message.text == "üîô –ù–∞–∑–∞–¥":
        return await back_to_pack_management(update, context)
    
    try:
        pack_id = int(update.message.text)
        file_path = database.delete_pack(pack_id)
        
        if file_path:
            try:
                if os.path.exists(file_path):
                    os.remove(file_path)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ø–∞–∫–∞: {e}")
            
            await update.message.reply_text(f"‚úÖ –ü–∞–∫ ID:{pack_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!")
        else:
            await update.message.reply_text("‚ùå –ü–∞–∫ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–∞–∫–∞.")
    
    return await back_to_pack_management(update, context)

async def back_to_packs_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –ø–∞–∫–æ–≤"""
    await update.message.reply_text(
        "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –ø–∞–∫–æ–≤",
        reply_markup=keyboards.packs_menu())
    return PACKS_MENU

async def back_to_pack_management(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–∫–∞–º–∏"""
    username = sessions[update.effective_chat.id]
    is_master = database.is_master_admin(username)
    await update.message.reply_text(
        "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–∫–∞–º–∏",
        reply_markup=keyboards.pack_management_keyboard(is_master))
    return PACK_MANAGEMENT

# ====== –§–£–ù–ö–¶–ò–Ø –†–ê–°–°–´–õ–ö–ò –°–û–û–ë–©–ï–ù–ò–ô ======

async def broadcast_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è"""
    await update.message.reply_text(
        "‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=keyboards.back_only_keyboard())
    return BROADCAST_MESSAGE

async def broadcast_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è"""
    username = sessions[update.effective_chat.id]
    is_master = database.is_master_admin(username)
    
    message_text = update.message.text
    
    users = database.get_active_users()
    
    await update.message.reply_text(f"‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    success = 0
    errors = 0
    for user_id in users:
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üì¢ –í–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n{message_text}"
            )
            success += 1
            await asyncio.sleep(0.1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        except Exception as e:
            errors += 1
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è {user_id}: {e}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –æ —Ä–∞—Å—Å—ã–ª–∫–µ
    database.add_broadcast_record(username, message_text)
    
    await update.message.reply_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"‚úîÔ∏è –£—Å–ø–µ—à–Ω–æ: {success}\n"
        f"‚ùå –û—à–∏–±–∫–∏: {errors}"
    )
    return await back_to_admin_menu(update, context)

async def broadcast_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å—Å—ã–ª–æ–∫"""
    username = sessions[update.effective_chat.id]
    if not database.is_master_admin(username):
        return await back_to_admin_menu(update, context)

    history = database.get_broadcast_history()
    if not history:
        await update.message.reply_text("üì≠ –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫ –ø—É—Å—Ç–∞.")
        return await back_to_admin_menu(update, context)

    message = "üìä –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫:\n\n"
    for record in history:
        record_id, admin_username, message_text, timestamp = record
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        formatted_time = timestamp.split('.')[0] if isinstance(timestamp, str) else timestamp
        message += (
            f"‚è±Ô∏è <b>–í—Ä–µ–º—è:</b> {formatted_time}\n"
            f"üë§ <b>–ê–¥–º–∏–Ω:</b> @{admin_username}\n"
            f"‚úâÔ∏è <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{message_text}\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        )

    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    if len(message) > 4000:
        for x in range(0, len(message), 4000):
            await update.message.reply_text(message[x:x+4000], parse_mode='HTML')
    else:
        await update.message.reply_text(message, parse_mode='HTML')

    return await back_to_admin_menu(update, context)

# ====== –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ======

def main():
    application = (
        Application.builder()
        .token(config.BOT_TOKEN)
        .read_timeout(30)
        .write_timeout(30)
        .connect_timeout(30)
        .pool_timeout(30)
        .build()
    )
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            SUBSCRIPTION_CHECK: [
                MessageHandler(filters.Regex(r'^‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è$'), check_subscription)
            ],
            PARTICIPANT_CODE: [
                MessageHandler(filters.Regex(r'^üîç –í–≤–µ—Å—Ç–∏ –∫–æ–¥ –∫–∞–º–µ—Ä—ã$'), participant_code_input),
                MessageHandler(filters.Regex(r'^üîê –í—Ö–æ–¥ –¥–ª—è –∞–¥–º–∏–Ω–∞$'), admin_login),
                MessageHandler(filters.Regex(r'^üì¢ –ù–∞—à –∫–∞–Ω–∞–ª$'), show_channel),
                MessageHandler(filters.Regex(r'^üìÅ –ü—Ä–æ–µ–∫—Ç—ã$'), projects_menu),
                MessageHandler(filters.Regex(r'^üì¶ –ü–∞–∫–∏ –∫–∞–º–µ—Ä$'), packs_menu),
                MessageHandler(filters.TEXT & ~filters.COMMAND, participant_code)
            ],
            LOGIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, login)],
            PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, password)],
            ADMIN_MENU: [
                MessageHandler(filters.Regex(r'^üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç$'), upload_photo),
                MessageHandler(filters.Regex(r'^üì∑ –ú–æ–∏ –∫–∞–º–µ—Ä—ã$'), my_codes),  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
                MessageHandler(filters.Regex(r'^üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–∫–∞–º–∏$'), pack_management),
                MessageHandler(filters.Regex(r'^üîê –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å$'), change_password),
                MessageHandler(filters.Regex(r'^‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞$'), broadcast_start),
                MessageHandler(filters.Regex(r'^üö™ –í—ã–π—Ç–∏$'), logout),
                MessageHandler(filters.Regex(r'^üîô –ù–∞–∑–∞–¥$'), back_to_admin_menu),
                MessageHandler(filters.Regex(r'^üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏$'), admin_management),
                MessageHandler(filters.Regex(r'^üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∞–º–∏$'), category_management),
                MessageHandler(filters.Regex(r'^üö´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–Ω–∞–º–∏$'), ban_management),
                MessageHandler(filters.Regex(r'^üîë –ö–æ–¥—ã –æ—Ç –∫–∞–º–µ—Ä$'), camera_codes),
                MessageHandler(filters.Regex(r'^üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞–º–µ—Ä—É$'), delete_camera_start),
                MessageHandler(filters.Regex(r'^üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π$'), user_list),
                MessageHandler(filters.Regex(r'^üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏$'), project_management),
                MessageHandler(filters.Regex(r'^üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫$'), broadcast_history),
            ],
            ADMIN_MANAGEMENT: [
                MessageHandler(filters.Regex(r'^‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞$'), add_admin_handler),
                MessageHandler(filters.Regex(r'^‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞$'), del_admin),
                MessageHandler(filters.Regex(r'^üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤$'), list_admins),
                MessageHandler(filters.Regex(r'^üîô –ù–∞–∑–∞–¥$'), back_to_admin_menu),
            ],
            ADD_ADMIN_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_admin_name)],
            ADD_ADMIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_admin_username)],
            ADD_ADMIN_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_admin_password)],
            UPLOAD_CATEGORY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, upload_category)
            ],
            UPLOAD_PHOTO: [
                MessageHandler(filters.Regex(r'^üîô –ù–∞–∑–∞–¥$'), back_to_admin_menu_from_upload),  # –î–æ–±–∞–≤–ª–µ–Ω–æ
                MessageHandler(filters.PHOTO, upload_photo_handler)
            ],
            UPLOAD_CAPTION: [
                MessageHandler(filters.Regex(r'^üîô –ù–∞–∑–∞–¥$'), back_to_admin_menu_from_upload),  # –î–æ–±–∞–≤–ª–µ–Ω–æ
                MessageHandler(filters.TEXT & ~filters.COMMAND, upload_caption)
            ],
            UPLOAD_CUSTOM_NAME: [
                MessageHandler(filters.Regex(r'^üîô –ù–∞–∑–∞–¥$'), back_to_admin_menu_from_upload),  # –î–æ–±–∞–≤–ª–µ–Ω–æ
                MessageHandler(filters.TEXT & ~filters.COMMAND, upload_custom_name)
            ],
            NEW_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, new_password)],
            DEL_ADMIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, del_admin_handler)],
            ADD_CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_category_handler)],
            DEL_CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, del_category_handler)],
            BAN_MANAGEMENT: [
                MessageHandler(filters.Regex(r'^üö´ –ó–∞–±–∞–Ω–∏—Ç—å$'), ban_user),
                MessageHandler(filters.Regex(r'^‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å$'), unban_user),
                MessageHandler(filters.Regex(r'^üë• –°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö$'), list_banned_users),
                MessageHandler(filters.Regex(r'^üîô –ù–∞–∑–∞–¥$'), back_to_admin_menu),
            ],
            BAN_USER_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, ban_user_handler)],
            UNBAN_USER_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, unban_user_handler)],
            CAMERA_CODES_MENU: [
                MessageHandler(filters.Regex(r'^üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º$'), camera_stats),
                MessageHandler(filters.Regex(r'^üìù –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–¥–æ–≤$'), all_codes_list),
                MessageHandler(filters.Regex(r'^üîô –ù–∞–∑–∞–¥$'), back_to_admin_menu),
            ],
            DELETE_CAMERA: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, delete_camera_handler)
            ],
            CATEGORY_MANAGEMENT: [
                MessageHandler(filters.Regex(r'^‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∫–ª–∞–¥–∫—É$'), add_category),
                MessageHandler(filters.Regex(r'^‚ûñ –£–¥–∞–ª–∏—Ç—å –≤–∫–ª–∞–¥–∫—É$'), del_category),
                MessageHandler(filters.Regex(r'^üîô –ù–∞–∑–∞–¥$'), back_to_admin_menu),
            ],
            PROJECTS_MENU: [
                MessageHandler(filters.Regex(r'^üîô –ù–∞–∑–∞–¥$'), back_to_main_menu),
                MessageHandler(filters.TEXT & ~filters.COMMAND, send_project)
            ],
            PROJECT_MANAGEMENT: [
                MessageHandler(filters.Regex(r'^üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–µ–∫—Ç$'), upload_project_start),
                MessageHandler(filters.Regex(r'^üìù –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤$'), list_projects_admin),
                MessageHandler(filters.Regex(r'^üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç$'), delete_project_start),
                MessageHandler(filters.Regex(r'^üîô –ù–∞–∑–∞–¥$'), back_to_admin_menu),
            ],
            UPLOAD_PROJECT_FILE: [
                MessageHandler(filters.Regex(r'^üîô –ù–∞–∑–∞–¥$'), back_to_project_management),
                MessageHandler(filters.Document.ALL, upload_project_file)
            ],
            UPLOAD_PROJECT_CAPTION: [
                MessageHandler(filters.Regex(r'^üîô –ù–∞–∑–∞–¥$'), back_to_project_management),
                MessageHandler(filters.TEXT & ~filters.COMMAND, upload_project_caption)
            ],
            UPLOAD_PROJECT_NAME: [
                MessageHandler(filters.Regex(r'^üîô –ù–∞–∑–∞–¥$'), back_to_project_management),
                MessageHandler(filters.TEXT & ~filters.COMMAND, upload_project_name)
            ],
            DELETE_PROJECT: [
                MessageHandler(filters.Regex(r'^üîô –ù–∞–∑–∞–¥$'), back_to_project_management),
                MessageHandler(filters.TEXT & ~filters.COMMAND, delete_project_handler)
            ],
            PACKS_MENU: [
                MessageHandler(filters.Regex(r'^üîô –ù–∞–∑–∞–¥$'), back_to_main_menu),
                MessageHandler(filters.TEXT & ~filters.COMMAND, send_pack)
            ],
            PACK_MANAGEMENT: [
                MessageHandler(filters.Regex(r'^üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–∞–∫$'), upload_pack_start),
                MessageHandler(filters.Regex(r'^üì¶ –ú–æ–∏ –ø–∞–∫–∏$'), list_my_packs),
                MessageHandler(filters.Regex(r'^üì¶ –í—Å–µ –ø–∞–∫–∏$'), list_all_packs_admin),
                MessageHandler(filters.Regex(r'^üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–∞–∫$'), delete_pack_start),
                MessageHandler(filters.Regex(r'^üîô –ù–∞–∑–∞–¥$'), back_to_admin_menu),
            ],
            UPLOAD_PACK_FILE: [
                MessageHandler(filters.Regex(r'^üîô –ù–∞–∑–∞–¥$'), back_to_pack_management),
                MessageHandler(filters.Document.ALL, upload_pack_file)
            ],
            UPLOAD_PACK_CAPTION: [
                MessageHandler(filters.Regex(r'^üîô –ù–∞–∑–∞–¥$'), back_to_pack_management),
                MessageHandler(filters.TEXT & ~filters.COMMAND, upload_pack_caption)
            ],
            UPLOAD_PACK_NAME: [
                MessageHandler(filters.Regex(r'^üîô –ù–∞–∑–∞–¥$'), back_to_pack_management),
                MessageHandler(filters.TEXT & ~filters.COMMAND, upload_pack_name)
            ],
            DELETE_PACK: [
                MessageHandler(filters.Regex(r'^üîô –ù–∞–∑–∞–¥$'), back_to_pack_management),
                MessageHandler(filters.TEXT & ~filters.COMMAND, delete_pack_handler)
            ],
            BROADCAST_MESSAGE: [
                MessageHandler(filters.Regex(r'^üîô –ù–∞–∑–∞–¥$'), back_to_admin_menu),
                MessageHandler(filters.TEXT & ~filters.COMMAND, broadcast_message)
            ],
            BROADCAST_HISTORY: [
                MessageHandler(filters.Regex(r'^üîô –ù–∞–∑–∞–¥$'), back_to_admin_menu),
            ],
        },
        fallbacks=[
            CommandHandler('start', start),  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            CommandHandler('cancel', cancel)
        ]
    )
    
    application.add_handler(conv_handler)
    application.add_error_handler(error_handler)
    application.run_polling()

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(msg="Exception while handling an update:", exc_info=context.error)
    
    try:
        if update and update.effective_chat:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    except:
        pass

if __name__ == '__main__':
    main()
